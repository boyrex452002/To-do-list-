<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productivity Pro - To-Do List</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --success: #4cc9f0;
            --warning: #f8961e;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 40px 20px;
        }
        
        .container {
            width: 100%;
            max-width: 600px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 30px;
            transition: all 0.3s ease;
        }
        
        h1 {
            color: var(--primary);
            text-align: center;
            margin-bottom: 25px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        input[type="text"] {
            flex: 1;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        input[type="text"]:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }
        
        button {
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        button:hover {
            background-color: var(--secondary);
            transform: translateY(-2px);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        .task-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .filter-btn {
            background-color: white;
            color: var(--gray);
            border: 1px solid #dee2e6;
            padding: 8px 15px;
            font-size: 14px;
        }
        
        .filter-btn.active {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        ul {
            list-style: none;
        }
        
        li {
            background-color: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            border-left: 4px solid white;
        }
        
        li:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }
        
        li.completed {
            opacity: 0.7;
            border-left-color: var(--success);
        }
        
        li.completed .task-text {
            text-decoration: line-through;
            color: var(--gray);
        }
        
        .task-text {
            flex: 1;
            margin-right: 15px;
            word-break: break-word;
        }
        
        .task-actions {
            display: flex;
            gap: 8px;
        }
        
        .task-btn {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            font-size: 16px;
            padding: 5px;
            border-radius: 4px;
            transition: all 0.2s ease;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .task-btn:hover {
            background-color: #f1f3f5;
        }
        
        .complete-btn:hover {
            color: var(--success);
        }
        
        .edit-btn:hover {
            color: var(--warning);
        }
        
        .delete-btn:hover {
            color: var(--accent);
        }
        
        .stats {
            margin-top: 20px;
            text-align: center;
            color: var(--gray);
            font-size: 14px;
        }
        
        .empty-state {
            text-align: center;
            padding: 30px 0;
            color: var(--gray);
        }
        
        .empty-state i {
            font-size: 50px;
            margin-bottom: 15px;
            color: #e9ecef;
        }
        
        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }
            
            .input-container {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><i class="fas fa-tasks"></i> Productivity Pro</h1>
        
        <div class="input-container">
            <input type="text" placeholder="What needs to be done?" id="taskInput" autofocus>
            <button onclick="addTask()" id="addBtn">
                <i class="fas fa-plus"></i> Add
            </button>
        </div>
        
        <div class="task-controls">
            <button class="filter-btn active" onclick="filterTasks('all')">All</button>
            <button class="filter-btn" onclick="filterTasks('active')">Active</button>
            <button class="filter-btn" onclick="filterTasks('completed')">Completed</button>
        </div>
        
        <ul id="taskList">
            <div class="empty-state">
                <i class="fas fa-clipboard-list"></i>
                <p>No tasks yet. Add one above!</p>
            </div>
        </ul>
        
        <div class="stats" id="stats">
            0 tasks remaining
        </div>
    </div>

    <script>
        // DOM Elements
        const taskInput = document.getElementById("taskInput");
        const taskList = document.getElementById("taskList");
        const statsElement = document.getElementById("stats");
        let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        
        // Initialize the app
        function init() {
            renderTasks();
            updateStats();
            
            // Add task on Enter key
            taskInput.addEventListener("keypress", function(event) {
                if (event.key === "Enter") {
                    addTask();
                }
            });
        }
        
        // Add new task
        function addTask() {
            const taskText = taskInput.value.trim();
            
            if (taskText === "") {
                showAlert("Please enter a task");
                return;
            }
            
            const newTask = {
                id: Date.now(),
                text: taskText,
                completed: false,
                createdAt: new Date().toISOString()
            };
            
            tasks.unshift(newTask);
            saveTasks();
            renderTasks();
            updateStats();
            
            taskInput.value = "";
            taskInput.focus();
        }
        
        // Render tasks based on current filter
        function renderTasks(filter = 'all') {
            if (tasks.length === 0) {
                taskList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-clipboard-list"></i>
                        <p>No tasks yet. Add one above!</p>
                    </div>
                `;
                return;
            }
            
            let filteredTasks = tasks;
            if (filter === 'active') {
                filteredTasks = tasks.filter(task => !task.completed);
            } else if (filter === 'completed') {
                filteredTasks = tasks.filter(task => task.completed);
            }
            
            if (filteredTasks.length === 0) {
                taskList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-${filter === 'active' ? 'check-circle' : 'list'}"></i>
                        <p>No ${filter} tasks found</p>
                    </div>
                `;
                return;
            }
            
            taskList.innerHTML = filteredTasks.map(task => `
                <li class="${task.completed ? 'completed' : ''}" data-id="${task.id}">
                    <span class="task-text">${task.text}</span>
                    <div class="task-actions">
                        <button class="task-btn complete-btn" onclick="toggleComplete(${task.id})">
                            <i class="fas fa-${task.completed ? 'undo' : 'check'}"></i>
                        </button>
                        <button class="task-btn edit-btn" onclick="editTask(${task.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="task-btn delete-btn" onclick="deleteTask(${task.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </li>
            `).join('');
        }
        
        // Toggle task completion status
        function toggleComplete(taskId) {
            tasks = tasks.map(task => 
                task.id === taskId ? {...task, completed: !task.completed} : task
            );
            saveTasks();
            renderTasks(getCurrentFilter());
            updateStats();
        }
        
        // Edit task
        function editTask(taskId) {
            const task = tasks.find(t => t.id === taskId);
            const newText = prompt("Edit your task:", task.text);
            
            if (newText !== null && newText.trim() !== "") {
                task.text = newText.trim();
                saveTasks();
                renderTasks(getCurrentFilter());
            }
        }
        
        // Delete task
        function deleteTask(taskId) {
            if (confirm("Are you sure you want to delete this task?")) {
                tasks = tasks.filter(task => task.id !== taskId);
                saveTasks();
                renderTasks(getCurrentFilter());
                updateStats();
            }
        }
        
        // Filter tasks
        function filterTasks(filter) {
            // Update active filter button
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase() === filter);
            });
            
            renderTasks(filter);
        }
        
        // Get current active filter
        function getCurrentFilter() {
            const activeBtn = document.querySelector('.filter-btn.active');
            return activeBtn ? activeBtn.textContent.toLowerCase() : 'all';
        }
        
        // Update task statistics
        function updateStats() {
            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(task => task.completed).length;
            const remainingTasks = totalTasks - completedTasks;
            
            statsElement.textContent = `${remainingTasks} ${remainingTasks === 1 ? 'task' : 'tasks'} remaining (${completedTasks} completed)`;
        }
        
        // Save tasks to localStorage
        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }
        
        // Show alert message
        function showAlert(message) {
            alert(message);
        }
        
        // Initialize the app
        init();
    </script>
</body>
</html>
